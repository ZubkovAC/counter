{"version":3,"sources":["bll/store.ts","bll/counter-reducer.ts","Counter/Settings.tsx","Counter/Button.tsx","Counter/Customization.tsx","Counter/Table.tsx","Counter/Display.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["preloderState","initalState","startValue","minValue","maxValue","blockButton","error","errorValueAC","a","type","Settings","props","className","name","value","valueOption","onChange","e","onChangeValue","currentTarget","Button","color","colorOff","buttonName","onClick","set","increase","Customization","onChangeMAX","onChangeMIN","reset","Table","table","Display","button","incValue","Counter","useSelector","state","counter","dispatch","useDispatch","testError","newValueOnChange","mxvalue","mnvalue","rootReducer","combineReducers","action","persistedTodostring","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a75a5f6c.chunk.js","sourcesContent":["import {counterReducer} from \"./counter-reducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\nconst rootReducer = combineReducers ({\r\n    counter:counterReducer\r\n})\r\n\r\nlet preloderState\r\nconst persistedTodostring = localStorage.getItem('app-state')\r\nif (persistedTodostring)\r\n    preloderState = JSON.parse(persistedTodostring)\r\n\r\n\r\nexport const store = createStore (rootReducer,preloderState)\r\n\r\n\r\nstore.subscribe( () => {\r\n    localStorage.setItem('app-state',JSON.stringify(store.getState()))\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppStoreType = typeof store\r\n","\r\nconst initalState = {\r\n    startValue: 10,\r\n    minValue: 10,\r\n    maxValue: 15,\r\n    blockButton: false,\r\n    error: false\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initalState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-VALUE\":\r\n            return {...state, startValue: state.startValue + 1}\r\n        case \"ERROR-VALUE\":\r\n            return {...state, error: state.error = action.a }\r\n        case \"SET-VALUE-FROM-LOCAL-STORAGE\":\r\n            return {\r\n                ...state,\r\n                startValue: state.minValue,\r\n                blockButton: !state.blockButton,\r\n            }\r\n        case \"RESET-LOCAL-STORAGE\":\r\n            return {...state, startValue: state.minValue}\r\n        case \"MAX-VALUE-LOCAL-STORAGE\": {\r\n            return {...state, maxValue: action.mxvalue}\r\n        }\r\n        case \"MIN-VALUE-LOCAL-STORAGE\":\r\n            return {...state, minValue: action.mnvalue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const incCounterValueAC = () => ({type: \"INC-VALUE\"} as const)\r\nexport const errorValueAC = (a:boolean) => ({type: \"ERROR-VALUE\",a} as const)\r\nexport const setValueFromLocalStorageAC = () => ({type: \"SET-VALUE-FROM-LOCAL-STORAGE\"} as const)\r\nexport const resetLocalStorageAC = () => ({type: \"RESET-LOCAL-STORAGE\"} as const)\r\nexport const maxValueLocalStorageAC = (mxvalue: number) => ({type: \"MAX-VALUE-LOCAL-STORAGE\", mxvalue} as const)\r\nexport const minValueLocalStorageAC = (mnvalue: number) => ({type: \"MIN-VALUE-LOCAL-STORAGE\", mnvalue} as const)\r\n\r\n\r\n\r\n// Type\r\n\r\ntype InitialStateType = typeof initalState\r\n\r\nexport type ActionType =\r\n    IncCounterValueACType |\r\n    ErrorValueAC |\r\n    SetValueFromLocalStorageACType |\r\n    ResetLocalStorageACType |\r\n    MaxValueLocalStorageACType |\r\n    MinValueLocalStorageACType\r\n\r\nexport type IncCounterValueACType = ReturnType<typeof incCounterValueAC>\r\nexport type ErrorValueAC = ReturnType<typeof errorValueAC>\r\nexport type SetValueFromLocalStorageACType = ReturnType<typeof setValueFromLocalStorageAC>\r\nexport type ResetLocalStorageACType = ReturnType<typeof resetLocalStorageAC>\r\nexport type MaxValueLocalStorageACType = ReturnType<typeof maxValueLocalStorageAC>\r\nexport type MinValueLocalStorageACType = ReturnType<typeof minValueLocalStorageAC>\r\n\r\n","import React from \"react\";\r\n\r\ntype OptionPropsType = {\r\n    valueOption: number\r\n    error: boolean\r\n    name: string\r\n    onChangeValue: (onChange: number) => void\r\n\r\n}\r\n\r\nexport const Settings = (props: OptionPropsType) => {\r\n    return (\r\n        <div className='option'>\r\n            <div className={props.error ? 'colorOff' : 'option'}>\r\n                {props.name}\r\n                    <input type=\"number\" value={props.valueOption} onChange={ e => props.onChangeValue(+e.currentTarget.value)}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    buttonName?:string\r\n    increase?:()=>void\r\n    maxValue?:number\r\n    minValue?:number\r\n    startValue?:number\r\n    set?:()=>void\r\n    error?:boolean\r\n    button?:boolean\r\n}\r\n\r\nexport const Button = (props:ButtonPropsType) =>{\r\n\r\n    const color = props.startValue=== props.maxValue ? 'colorOff' : ''\r\n    const colorOff = props.startValue === props.minValue ? 'colorOff' : ''\r\n\r\n    return(\r\n        <span className={props.error? 'colorOff' :''} >\r\n\r\n            {props.buttonName==='set'\r\n                ? <button onClick={props.set }>{props.buttonName}</button>\r\n                : <button className={`${color} ${colorOff}`} onClick={props.increase}>{props.buttonName}</button>\r\n        }\r\n        </span>\r\n    )\r\n}\r\n\r\n","import {Settings} from \"./Settings\";\r\nimport {Button} from \"./Button\";\r\nimport React from \"react\";\r\n\r\ntype CustomizationType ={\r\n    set:()=>void\r\n    blockButton:boolean\r\n    error:boolean\r\n    onChangeMAX:(a:number)=>void\r\n    onChangeMIN:(a:number)=>void\r\n    maxValue:number\r\n    minValue:number\r\n    startValue:number\r\n    reset:()=>void\r\n}\r\n\r\nexport const Customization = (props:CustomizationType) =>{\r\n    return (\r\n        <div className='counter'>\r\n            <div className='up'>\r\n\r\n                <Settings  key={'max'} error={props.error} onChangeValue={props.onChangeMAX}\r\n                          name={'max value'} valueOption={props.maxValue}/>\r\n                <Settings key={'start'} error={props.error} onChangeValue={props.onChangeMIN}\r\n                         name={'start value'} valueOption={props.minValue}/>\r\n            </div>\r\n            <div className='down'>\r\n\r\n                <div className={props.blockButton ? 'colorOff' : ''}>\r\n                    {props.error\r\n                        ? <Button error={props.error} set={props.set} startValue={props.startValue}\r\n                                  minValue={props.minValue} increase={props.reset}\r\n                                  buttonName='Error'/>\r\n                        : <Button error={props.error} set={props.set} startValue={props.startValue}\r\n                                  minValue={props.minValue} increase={props.reset}\r\n                                   buttonName='set' /> }\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\ntype TablePropsType = {\r\n    table:number | string\r\n    maxValue:number\r\n    minValue:number\r\n    errText?:string |null\r\n}\r\n\r\nexport const Table =(props:TablePropsType) =>{\r\n    return (\r\n        <div className={props.table ===props.maxValue? 'color':''}>\r\n           {/* {props.errText? props.table : 'incorrest Value'}*/}\r\n            {props.minValue < props.maxValue && props.minValue >= 0 ? 'incorret Value' : props.table  }\r\n        </div>\r\n    )\r\n}","import {Table} from \"./Table\";\r\nimport {Button} from \"./Button\";\r\nimport React from \"react\";\r\n\r\ntype MonitorType = {\r\n    set: () => void\r\n    blockButton: boolean\r\n    maxValue: number\r\n    minValue: number\r\n    startValue: number\r\n    reset: () => void\r\n    incValue:()=>void\r\n}\r\n\r\n\r\nexport const Display = (props: MonitorType) => {\r\n    return (\r\n        <div className='counter'>\r\n            <div className={props.blockButton ? 'up' : 'upOff'}>\r\n                <Table minValue={props.maxValue} table={props.blockButton ? props.startValue : 'need press \"set\" '}\r\n                       maxValue={props.maxValue}/>\r\n            </div>\r\n            <div className={props.blockButton ? 'down' : 'downOff'}>\r\n                <Button button={props.blockButton} startValue={props.startValue} maxValue={props.maxValue}\r\n                        increase={props.incValue}\r\n                        buttonName='inc'/>\r\n                <Button  button={props.blockButton} startValue={props.startValue} minValue={props.minValue}\r\n                        increase={props.reset}\r\n                        buttonName='reset'/>\r\n                <Button set={props.set} buttonName='set'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../bll/store\";\r\nimport {\r\n    errorValueAC,\r\n    incCounterValueAC,\r\n    maxValueLocalStorageAC,\r\n    minValueLocalStorageAC,\r\n    resetLocalStorageAC, setValueFromLocalStorageAC\r\n} from \"../bll/counter-reducer\";\r\nimport {Customization} from \"./Customization\";\r\nimport { Display } from './Display';\r\n\r\n\r\n\r\nexport const Counter = () => {\r\n\r\n    let maxValue = useSelector<AppStateType,number>(state => state.counter.maxValue)\r\n    let minValue = useSelector<AppStateType,number>(state => state.counter.minValue)\r\n    let startValue = useSelector<AppStateType,number>(state => state.counter.startValue)\r\n    let error = useSelector<AppStateType,boolean>(state => state.counter.error)\r\n    let blockButton = useSelector<AppStateType,boolean>(state => state.counter.blockButton)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const testError = (maxValue: number, minValue: number) => {\r\n        if (maxValue <=  minValue|| minValue < 0) {\r\n            dispatch(errorValueAC(true))\r\n        } else {\r\n            dispatch(errorValueAC(false))\r\n        }\r\n    }\r\n\r\n    const set = () => {\r\n        dispatch(errorValueAC(false))\r\n        dispatch(setValueFromLocalStorageAC())\r\n    }\r\n    const incValue = () => {\r\n        if (startValue >= maxValue || minValue < 0) {\r\n            dispatch(errorValueAC(true))\r\n        } else {\r\n            dispatch(errorValueAC(false))\r\n            dispatch(incCounterValueAC())\r\n        }\r\n    }\r\n    const reset = () => {\r\n        dispatch(resetLocalStorageAC())\r\n    }\r\n    const onChangeMAX = (newValueOnChange:number) => {\r\n        testError(newValueOnChange,minValue)\r\n        dispatch(maxValueLocalStorageAC(newValueOnChange))\r\n    }\r\n    const onChangeMIN = (newValueOnChange:number) => {\r\n        testError(maxValue,newValueOnChange)\r\n        dispatch(minValueLocalStorageAC(newValueOnChange))\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n\r\n            { !blockButton\r\n                ? <Customization set={set} blockButton={blockButton} error={error}\r\n                         onChangeMAX={onChangeMAX} onChangeMIN={onChangeMIN}\r\n                         maxValue={maxValue} minValue={minValue} startValue={startValue} reset={reset}/>\r\n                : <Display set={set} blockButton={blockButton}\r\n                         maxValue={maxValue} minValue={minValue} startValue={startValue}\r\n                         reset={reset} incValue={incValue} />}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Provider store={store}>\n            <Counter/>\n        </Provider>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}